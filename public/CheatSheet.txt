1.after copying start files of router-app, npm i react-router-dom
2.in index.js, import BrowserRouter:
import { BrowserRouter } from "react-router-dom";
4.wrap the <App/> component inside a <BrowserRouter/> (the BrowserRouter will pass the 
browser history to <App/> and all its children components):
ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById("root")
);
registerServiceWorker();
5.in App.js, add a div with a class of content below the <NavBar/>:
class App extends Component {
  render() {
    return (
      <div>
        <NavBar />
        <div className="content">
        
        </div>
      </div>
    );
  }
}

export default App;
6.import Route from react-router-dom:
import React, { Component } from "react";
import { Route } from "react-router-dom";
7.register one or more route with two props (path and component) in the new div:
<div className="content">
  <Route path="/products" component={Products} />
</div>
8.duplicate the <Route/> three times and assign the posts, admin and home paths:
<div className="content">
  <Route path="/products" component={Products} />
  <Route path="/posts" component={Posts} />
  <Route path="/admin" component={Dashboard} />
  <Route path="/" component={Home} />
</div>
9.add the exact props to the home <Route/> so the <Home/> is not rendered with all
the routes that begin with /:
<Route exact path="/" component={Home} />
10.in App.js, import Switch from react-router-dom:
import { Route, Switch } from "react-router-dom";
11.wrap the routes in a <Switch/>
Switch will render only the first child that matches the location
routes being inclusive, they MUST be ordered from most specific to most generic:
<Switch>
  <Route path="/products" component={Products} />
  <Route path="/posts" component={Posts} />
  <Route path="/admin" component={Dashboard} />
  <Route path="/" component={Home} />
</Switch>
12.to avoid reloading of the whole js (bundle.js) every time a link is clicked, replace 
the anchors <a/> in navbar.jsx with react <Link/> components:
import React from "react";
import { Link } from "react-router-dom";

const NavBar = () => {
  return (
    <ul>
      <li>
        <Link to="/">Home</Link>
      </li>
      <li>
        <Link to="/products">Products</Link>
      </li>
      <li>
        <Link to="/posts/2018/06">Posts</Link>
      </li>
      <li>
        <Link to="/admin">Admin</Link>
      </li>
    </ul>
  );
};

export default NavBar;
13.to pass props to a <Route/> component, change the component prop for a render prop
where an => () that will return the component to render with its passed props:
<Route
  path="/products"
  render={() => <Products sortBy="newest" />}
/>
14.to get the <Router/> injected props (history, location and match) back into the rendered
component's props, pass props as the => () argument and use object spread to pass them in
the rendered component:
<Route
  path="/products"
  render={props => <Products sortBy="newest" {...props} />}
/>
15.in App.js, define a new route for the product details panel with a path that has a 
product id parameter:
<Switch>
  <Route path="/products/:id" />
16.add two parameters to the path of the posts route:
<Route path="/posts/:year/:month" component={Posts} />
17.to display the id of a product in the heading of <ProductDetails/>, read it from 
the match props.params:
<div>
  <h1>Product Details - {this.props.match.params.id}</h1>
  <button onClick={this.handleSave}>Save</button>
</div>
18.in the <Product/> component, replace the <a/> with a <Link/> to avoid whole page reload:
<li key={product.id}>
  <Link to={`/products/${product.id}`}>{product.name}</Link>
</li>
19.in the route of posts in App.js, add a ? to the path parameters to make them optional:
<Route path="/posts/:year?/:month?" component={Posts} />
20.in posts.jsx, pass the props and read the path parameters to display them:
<div>
  <h1>Posts</h1>
  Year: {props.match.params.year}, Month: {props.match.params.month}
</div>
21.use destructuring to simplify the code:
const Posts = ({ match }) => {
  return (
    <div>
      <h1>Posts</h1>
      Year: {match.params.year}, Month: {match.params.month}
    </div>
  );
};
22.install the query-string npm module:
npm i query-string@6.1.0
23.import it in posts.jsx:
import queryString from "query-string";
24.add the location object from the <Route/> props to the object destructuring of posts.jsx:
const Posts = ({ match, location }) => {
...
25.parse the location .search with query-string:
const Posts = ({ match, location }) => {
  queryString.parse(location.search);
26.grab the result in a const and console log to view the result:
const Posts = ({ match, location }) => {
  const result = queryString.parse(location.search);
  console.log(result);
27.navigate to an unexisting url:
http://localhost:3000/xyz
28.<Home/> rendered because its path "/" matched the "/xyz" path so add the exact prop to 
the "/" route:
<Route exact path="/" component={Home} />
29.add the Redirect named import from the react-router-dom:
import { Route, Switch, Redirect } from "react-router-dom";
30.create a <Redirect/> with a to="/not-found" below the list of <Route/> components:
<Redirect to="/not-found" />
31.create the new not-found route to display the <NotFound/> component just above the home route:
<NotFound path="/not-found" component={NotFound} />
<Route exact path="/" component={Home} />
<Redirect to="/not-found" />
32.use another <Redirect/> to redirect the unexisting "/messages" route to the "/posts" route:
<Redirect from="/messages" to="/posts" />
33.to programmatically nabigate the user to the products component when the the user clicks
on the save button of a product details, push the products url in the history:
handleSave = () => {
  this.props.history.push("/products");
};
34.replace the push with a replace to avoid going back to the (saved) product details 
with the browser back button (often used with login pages):
handleSave = () => {
  this.props.history.push("/products");
};
35.to set up nested routing, open dashboard.jsx and import the link component from react-router-dom:
import React from "react";
import { Link } from "react-router-dom";
36.add the <ul/> for links below the <h1/> by typing ul>(li>Link[to=''])*2:
<h1>Admin Dashboard</h1>
<ul>
  <li>
    <Link to=""></Link>
  </li>
  <li>
    <Link to=""></Link>
  </li>
</ul>
37.add the to='' paths and text nodes to the <link/> components:
<li>
  <Link to="/admin/posts">Posts</Link>
</li>
<li>
  <Link to="/admin/users">Users</Link>
</li>
38.extract the <ul/> to put it in a new sidebar.jsx component inside the admin folder:
import React from "react";
import { Link } from "react-router-dom";

const Sidebar = () => {
  return (
    <ul>
      <li>
        <Link to="/admin/posts">Posts</Link>
      </li>
      <li>
        <Link to="/admin/users">Users</Link>
      </li>
    </ul>
  );
};

export default Sidebar;
39.import and render the new <Sidebar/> component in dashboard.jsx:
import React from "react";
import Sidebar from "./sidebar";

const Dashboard = ({ match }) => {
  return (
    <div>
      <h1>Admin Dashboard</h1>
      <Sidebar />
    </div>
  );
};

export default Dashboard;
40.import Route, Posts and Users then create the routes for users and posts 
with the corresponding paths and components:
import React from "react";
import Sidebar from "./sidebar";
import { Route } from "react-router-dom";
import Posts from "./posts";
import Users from "./users";

const Dashboard = ({ match }) => {
  return (
    <div>
      <h1>Admin Dashboard</h1>
      <Sidebar />
      <Route path="/admin/posts" component={Posts} />
      <Route path="/admin/users" component={Users} />
    </div>
  );
};

export default Dashboard;
